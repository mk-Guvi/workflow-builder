generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_DB_URL")
}

model workflows {
  id                String              @id @default(uuid())
  is_active         Boolean             @default(false)
  name              String
  description       String
  user_id           String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
  is_deleted        Boolean             @default(false)
  webhooks          webhooks[]
  edges             workflowEdges[]     @relation("workflowToEdges")
  nodes             workflowNodes[]     @relation("workflowToNodes")
  executionsHistory executionsHistory[] @relation("workflow")
}

model workflowNodes {
  id            String          @id @default(cuid())
  workflowId    String
  type          NodeType
  positionX     Float
  positionY     Float
  label         String
  icon          String?
  color         String?
  description   String?
  data          Json?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  webhook       webhooks?
  outgoingEdges workflowEdges[] @relation("SourceToEdge")
  incomingEdges workflowEdges[] @relation("TargetToEdge")
  workflow      workflows       @relation("workflowToNodes", fields: [workflowId], references: [id])
}

model workflowEdges {
  id         String        @id @default(cuid())
  workflowId String
  source     String
  target     String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  sources    workflowNodes @relation("SourceToEdge", fields: [source], references: [id])
  targets    workflowNodes @relation("TargetToEdge", fields: [target], references: [id])
  workflow   workflows     @relation("workflowToEdges", fields: [workflowId], references: [id])
}

model webhooks {
  id         String        @id @default(cuid())
  path       String
  workflowId String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  method     WebhookMethod
  nodeId     String        @unique
  node       workflowNodes @relation(fields: [nodeId], references: [id])
  workflow   workflows     @relation(fields: [workflowId], references: [id])
}

model executionNodes {
  id               String            @id @default(cuid())
  type             NodeType
  positionX        Float
  positionY        Float
  label            String
  icon             String?
  color            String?
  description      String?
  data             Json?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  workflowNodeId   String
  executionId      String
  executionHistory executionsHistory @relation(fields: [executionId], references: [id])
  outgoingEdges    executionEdges[]  @relation("SourceToExecutionEdge")
  incomingEdges    executionEdges[]  @relation("TargetToExecutionEdge")
  executions       executions[]      @relation("executions")
}

model executionEdges {
  id               String            @id @default(cuid())
  source           String
  target           String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  executionId      String
  executionHistory executionsHistory @relation(fields: [executionId], references: [id])
  sources          executionNodes    @relation("SourceToExecutionEdge", fields: [source], references: [id])
  targets          executionNodes    @relation("TargetToExecutionEdge", fields: [target], references: [id])
}

model executionsHistory {
  id             String           @id @default(cuid())
  workflowId     String
  workflow       workflows        @relation("workflow", fields: [workflowId], references: [id])
  status         ExecutionStatus
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  executionEdges executionEdges[]
  executionNodes executionNodes[]
  completedAt    DateTime?
  executions     executions[]
}


model executions {
  id               String            @id @default(uuid())
  executionId      String
  nodeId           String
  node             executionNodes    @relation("executions", fields: [nodeId], references: [id])
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  status           ExecutionStatus   @default(PENDING)
  executionHistory executionsHistory @relation(fields: [executionId], references: [id])
  outputJson       Json?
  completedAt      DateTime?
}

enum NodeType {
  WEBHOOK_NODE
  CODE_NODE
  WEBHOOK_RESPONSE_NODE
}

enum WebhookMethod {
  GET
  POST
  PUT
  DELETE
}

enum ExecutionStatus {
  PENDING
  COMPLETED
  FAILED
}
