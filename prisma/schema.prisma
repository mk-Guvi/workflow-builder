generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_DB_URL")
}

model workflows {
  id          String          @id @default(uuid())
  is_active   Boolean         @default(false)
  name        String
  description String
  user_id     String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now())
  is_deleted  Boolean         @default(false)

  // Relations
  nodes workflowNodes[] @relation("workflowToNodes")
  edges workflowEdges[] @relation("workflowToEdges")
}

model workflowNodes {
  id          String         @id @default(cuid())
  workflowId  String
  type        NodeType
  positionX   Float
  positionY   Float
  label       String
  icon        String?        
  color       String?        
  description String?        
  data        Json?          
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  workflow    workflows       @relation("workflowToNodes", fields: [workflowId], references: [id])
  outgoingEdges workflowEdges[] @relation("SourceToEdge")
  incomingEdges workflowEdges[] @relation("TargetToEdge")
}

model workflowEdges {
  id          String         @id @default(cuid())
  workflowId  String
  sourceId    String
  targetId    String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  workflow    workflows       @relation("workflowToEdges", fields: [workflowId], references: [id])
  source      workflowNodes  @relation("SourceToEdge", fields: [sourceId], references: [id])
  target      workflowNodes   @relation("TargetToEdge", fields: [targetId], references: [id])
}

enum NodeType {
  WEBHOOK_NODE
  CODE_NODE
  WEBHOOK_RESPONSE_NODE
}
